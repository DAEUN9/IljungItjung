plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar{
	enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all {
		exclude group : 'org.springframework.boot', module : 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	implementation 'org.apache.httpcomponents:httpclient'
	implementation 'org.apache.httpcomponents:httpcore'

	implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

test {
	finalizedBy 'jacocoTestReport'
	useJUnitPlatform()
}

jacocoTestReport {
	finalizedBy("jacocoTestCoverageVerification")

	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					 "com/iljungitjung/IljungitjungApplication.class",
					 "com/iljungitjung/global/**",
					 "com/iljungitjung/domain/**/dto/**",
					 "com/iljungitjung/domain/**/exception/**",
			])
		}))
	}
}
jacoco {
	toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			excludes = ['com.iljungitjung.global.*'
						, 'com.iljungitjung.IljungitjungApplication'
						, 'com.iljungitjung.domain.*.dto.*'
						, 'com.iljungitjung.domain.*.exception.*'
						, 'com.iljungitjung.domain.*.controller.*']
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.1
			}
		}
	}
}